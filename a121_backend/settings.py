"""
Django settings for a121_backend project.
Generated by 'django-admin startproject' using Django 5.1.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'qYLDi7xImARDcLIAW7MNz2rD3Z9nvXEaN7qn2zbjkfIcjEWP7cMe6WFGgqiF3itZnr8'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True  # Mantido como True para depuração

# Lista de hosts permitidos com suporte dinâmico para Ngrok
ALLOWED_HOSTS = ['127.0.0.1', 'localhost']
if 'NGROK_HOST' in os.environ:
    ALLOWED_HOSTS.append(os.environ['NGROK_HOST'])

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core',  # App core
    'widget_tweaks',  # Adicionado para django-widget-tweaks
    # 'channels',  # Comentado até configurar o backend de WebSockets
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'a121_backend.middleware.NgrokHostMiddleware',  # Middleware personalizado
    'a121_backend.middleware.RangeFileMiddleware',  # Novo middleware para suportar Range
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'a121_backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / "templates"],  # Diretório personalizado para templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',  # Para internacionalização
            ],
        },
    },
]

WSGI_APPLICATION = 'a121_backend.wsgi.application'

# Configuração do ASGI para Channels (se necessário)
# ASGI_APPLICATION = 'a121_backend.asgi.application'  # Comentado até configurar Channels

# Database - Configurado para PostgreSQL
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'a121_backend',  # Nome do banco
        'USER': 'postgres',  # Usuário padrão do PostgreSQL
        'PASSWORD': 'minhasenha123',  # Senha restaurada
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'pt-br'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

LANGUAGES = [
    ('pt-br', 'Português'),
    ('en', 'English'),
    ('es', 'Español'),
    ('fr', 'Français'),
    ('de', 'Deutsch'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

# Static files (CSS, JavaScript, Images)
STATIC_URL = '/static/'
STATICFILES_DIRS = [
    BASE_DIR / "static",  # Diretório para arquivos estáticos
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # Diretório para coleta de arquivos estáticos

# Media files (Uploads, Models 3D, etc.)
MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR / "media"  # Diretório para arquivos de mídia

# Default primary key field type
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Configuração do Google Cloud Dialogflow (se necessário)
GOOGLE_CLOUD_PROJECT = 'seu-projeto-id'  # Substitua pelo ID do seu projeto no Google Cloud
GOOGLE_APPLICATION_CREDENTIALS = os.path.join(BASE_DIR, 'credentials.json')  # Caminho para o arquivo de credenciais

# Configurações de autenticação
LOGIN_URL = 'core:login'  # URL para redirecionar usuários não autenticados
LOGIN_REDIRECT_URL = 'core:dashboard'  # URL para redirecionar após login
LOGOUT_REDIRECT_URL = 'core:index'  # URL para redirecionar após logout

# Configurações de sessão
SESSION_COOKIE_SECURE = False  # Defina como True em produção com HTTPS
SESSION_COOKIE_HTTPONLY = True
SESSION_COOKIE_SAMESITE = 'Lax'
SESSION_EXPIRE_AT_BROWSER_CLOSE = False
SESSION_COOKIE_AGE = 1209600  # 2 semanas em segundos

# Configuração de email (opcional, para recuperação de senha)
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'  # Para desenvolvimento
# Para produção, use um serviço como SendGrid ou SMTP:
# EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
# EMAIL_HOST = 'smtp.gmail.com'
# EMAIL_PORT = 587
# EMAIL_USE_TLS = True
# EMAIL_HOST_USER = 'seu-email@gmail.com'
# EMAIL_HOST_PASSWORD = 'sua-senha'